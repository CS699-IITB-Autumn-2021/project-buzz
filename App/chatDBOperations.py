from bson import ObjectId
from App import chatDB

# fetching collections from database to operate on them
chat_rooms_collection = chatDB.get_collection("chat_rooms")
room_member_collection = chatDB.get_collection("room_member")
messages_collection = chatDB.get_collection("messages")


def saveRoom(room_name, createdBy, room_member2):
    """
    This function adds a new chat room entry in the chat_rooms_collection, adds details of the chat room and its members
    in the room_members_collection.

    Inputs:
        :room_name: This the name for the new chat room
        :type room_name: String
        :createdBy: This the first room member of the room, the one who initiated create room process for current room
        :type createdBy: String
        :room_member2: This the second member of the chat room, in the two person conversation
        :type room_member2: String

    Returns:
        ::room_id of the newly created entry in the chat_rooms_collection
    """
    room_id = chat_rooms_collection.insert_one({'room-name': room_name}).inserted_id
    add_room_member(room_id, room_name, createdBy)
    add_room_member(room_id, room_name, room_member2)
    return room_id


def add_room_member(room_id, room_name, member_to_add):
    """
    This function adds room members in the room_member_collection

    Inputs:
        :room_id: The room in which the members are to be inserted
        :type room_id: Hexadecimal String (Autogenerated by MongoDB, 12byte _id)
        :room_name: The name of the room in which member is to be added
        :type room_name: String
        :member_to_add: The room member who is to be added
        :type member_to_add: String

    Returns:
        ::void, nothing to return from this function
    """
    room_member_collection.insert_one({'_id': {'room_id': ObjectId(room_id), 'username': member_to_add}, 'room_name': room_name})
    pass


def get_rooms_for_user(username):
    """
    This function fetches the chat rooms for a user given the username

    Inputs:
        :username: The name of the user
        :type username: String

    Returns:
        ::List of room of which the given user is part of.
    """
    return list(room_member_collection.find({'_id.username': username}))


def is_room_member(room_id, username):
    """
    This function finds if a user is part of a given chat room or not

    Inputs:
        :room_id: The id of the room in which we are looking for the membership of the user
        :type room_id: Hexadecimal String (Autogenerated by MongoDB, 12byte _id)
        :username: Name of the user whose membership is being checked
        :type username: String

    Returns:
        ::The count of rooms from room_members_collection where there is a match
    """
    return room_member_collection.count_documents({'_id': {'room_id': ObjectId(room_id), 'username': username}})
    pass


# saving messages to persistent storage
def save_message(room_id, data):
    """
    This function is used to save incoming messages of a chat room to database, so that we can load them back later when
    required

    Inputs:
        :room_id: The id of the room where the messages have been exchanged
        :type room_id: Hexadecimal String (Autogenerated by MongoDB, 12byte _id)
        :data: The entire message along with its timestamp, sender details and chat room name
        :type data: Dictionary

    Returns:
        :: void, nothing to be returned
    """
    messages_collection.insert_one({'room_id': room_id, 'data': data})
    pass


def get_room_by_roomname(room_name):
    """
    This function fetches the details of a chat room given the room_name

    Inputs:
        :room_name: The name of the chat room whose details are to fetched
        :type room_name: String

    Returns:
        ::list of rooms, matching the room-name , along with their attributes as a dictionary
    """
    return list(chat_rooms_collection.find({'room-name': room_name}))


def get_messages(room_id):
    """
    This function is to fetch the messages/older conversations of a given room

    Inputs:
        :room_id: The room is specified using the room_id
        :type room_id: Hexadecimal String (Autogenerated by MongoDB, 12byte _id)

    Returns:
        ::List of messages send in the chat room, in ascending order of timestamp(ie, older messages first)
    """
    return list(messages_collection.find({'room_id': room_id}))